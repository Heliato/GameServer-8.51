#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_TNT_Athena

#include "Basic.hpp"

#include "B_TNT_Athena_classes.hpp"
#include "B_TNT_Athena_parameters.hpp"


namespace SDK
{

// Function B_TNT_Athena.B_TNT_Athena_C.Spline Point Locations
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  Array                                                  (ConstParm, Parm, OutParm, ZeroConstructor)
// struct FTransform                       CallFunc_K2_GetComponentToWorld_ReturnValue            (IsPlainOldData, NoDestructor)
// struct FVector                          CallFunc_GetSocketLocation_ReturnValue                 (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CallFunc_GetSocketLocation_ReturnValue_1               (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CallFunc_InverseTransformLocation_ReturnValue          (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CallFunc_InverseTransformLocation_ReturnValue_1        (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CallFunc_GetSocketLocation_ReturnValue_2               (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CallFunc_GetSocketLocation_ReturnValue_3               (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CallFunc_InverseTransformLocation_ReturnValue_2        (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CallFunc_InverseTransformLocation_ReturnValue_3        (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  K2Node_MakeArray_Array                                 (ConstParm, ZeroConstructor, ReferenceParm)

void AB_TNT_Athena_C::Spline_Point_Locations(TArray<struct FVector>* Array, const struct FTransform& CallFunc_K2_GetComponentToWorld_ReturnValue, const struct FVector& CallFunc_GetSocketLocation_ReturnValue, const struct FVector& CallFunc_GetSocketLocation_ReturnValue_1, const struct FVector& CallFunc_InverseTransformLocation_ReturnValue, const struct FVector& CallFunc_InverseTransformLocation_ReturnValue_1, const struct FVector& CallFunc_GetSocketLocation_ReturnValue_2, const struct FVector& CallFunc_GetSocketLocation_ReturnValue_3, const struct FVector& CallFunc_InverseTransformLocation_ReturnValue_2, const struct FVector& CallFunc_InverseTransformLocation_ReturnValue_3, TArray<struct FVector>& K2Node_MakeArray_Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_TNT_Athena_C", "Spline Point Locations");

	Params::B_TNT_Athena_C_Spline_Point_Locations Parms{};

	Parms.CallFunc_K2_GetComponentToWorld_ReturnValue = std::move(CallFunc_K2_GetComponentToWorld_ReturnValue);
	Parms.CallFunc_GetSocketLocation_ReturnValue = std::move(CallFunc_GetSocketLocation_ReturnValue);
	Parms.CallFunc_GetSocketLocation_ReturnValue_1 = std::move(CallFunc_GetSocketLocation_ReturnValue_1);
	Parms.CallFunc_InverseTransformLocation_ReturnValue = std::move(CallFunc_InverseTransformLocation_ReturnValue);
	Parms.CallFunc_InverseTransformLocation_ReturnValue_1 = std::move(CallFunc_InverseTransformLocation_ReturnValue_1);
	Parms.CallFunc_GetSocketLocation_ReturnValue_2 = std::move(CallFunc_GetSocketLocation_ReturnValue_2);
	Parms.CallFunc_GetSocketLocation_ReturnValue_3 = std::move(CallFunc_GetSocketLocation_ReturnValue_3);
	Parms.CallFunc_InverseTransformLocation_ReturnValue_2 = std::move(CallFunc_InverseTransformLocation_ReturnValue_2);
	Parms.CallFunc_InverseTransformLocation_ReturnValue_3 = std::move(CallFunc_InverseTransformLocation_ReturnValue_3);
	Parms.K2Node_MakeArray_Array = std::move(K2Node_MakeArray_Array);

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}

}

